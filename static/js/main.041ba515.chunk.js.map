{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["fallbackURL","process","Canvas","props","img","canvasRef","useRef","useEffect","canvas","current","width","height","context","getContext","createImageBitmap","then","bmp","transferFromImageBitmap","ref","lum","data","slice","i","length","y","ImageData","imageData","cvs","document","createElement","ctx","console","log","drawImage","getImageData","App","useState","file","setFile","ready","setReady","Image","src","onload","e","className","File","custom","label","onChange","target","files","URL","createObjectURL","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iQAKMA,EAAcC,yBAEdC,EAAS,SAACC,GACZ,IAAMC,EAAMD,EAAMC,IACZC,EAAYC,iBAA0B,MAW5C,OAVAC,qBAAU,WACN,IAAMC,EAASH,EAAUI,QACzBD,EAAOE,MAAQN,EAAIM,MACnBF,EAAOG,OAASP,EAAIO,OACpB,IAAMC,EAAUJ,EAAOK,WAAW,kBAClCC,kBAAkBV,EAAK,EAAG,EAAGA,EAAIM,MAAON,EAAIO,QAAQI,MAAK,SAACC,GACtDJ,EAAQK,wBAAwBD,SAIjC,wBAAQE,IAAKb,KAGlBc,EAAM,SAACf,GAET,IADA,IAAIgB,EAAOhB,EAAIgB,KAAKC,QACXC,EAAI,EAAGA,EAAIlB,EAAIgB,KAAKG,OAAQD,GAAK,EAAG,CACzC,IAGME,GAHIpB,EAAIgB,KAAKE,EAAI,GACblB,EAAIgB,KAAKE,EAAI,GACblB,EAAIgB,KAAKE,EAAI,IACL,EAClBF,EAAKE,EAAE,GAAGE,EACVJ,EAAKE,EAAE,GAAGE,EACVJ,EAAKE,EAAE,GAAGE,EAEd,OAAO,IAAIC,UAAUL,EAAKhB,EAAIM,MAAMN,EAAIO,SAItCe,EAAY,SAACtB,GACf,IAAIuB,EAAMC,SAASC,cAAc,UACjCF,EAAIjB,MAAQN,EAAIM,MAChBiB,EAAIhB,OAASP,EAAIO,OACjB,IAAImB,EAAMH,EAAId,WAAW,MAGzB,OAFAkB,QAAQC,IAAIL,EAAIjB,OAChBoB,EAAIG,UAAU7B,EAAK,EAAG,EAAGuB,EAAIjB,MAAOiB,EAAIhB,QACjCmB,EAAII,aAAa,EAAG,EAAGP,EAAIjB,MAAOiB,EAAIhB,SAqDlCwB,MAlDf,WAAgB,IAAD,EACaC,mBAASpC,GADtB,mBACJqC,EADI,KACEC,EADF,OAEeF,oBAAS,GAFxB,mBAEJG,EAFI,KAEGC,EAFH,KAiBPpC,EAAM,IAAIqC,MAKd,OAJArC,EAAIsC,IAAML,EACVjC,EAAIuC,OARe,SAACC,GAChBJ,GAAS,IAWT,qBAAKK,UAAU,MAAf,SACI,eAAC,IAAD,WACI,eAAC,IAAD,CAAQA,UAAW,qBAAnB,UACI,cAAC,IAAD,UACI,cAAC,IAAQC,KAAT,CACIC,QAAQ,EACRC,MAAM,wBACNC,SA3BH,SAACL,GAClBJ,GAAS,GACc,OAAnBI,EAAEM,OAAOC,MACTb,EAAQc,IAAIC,gBAAgBT,EAAEM,OAAOC,MAAM,KAE3Cb,EAAQtC,QAyBA,cAAC,IAAD,UACI,cAAC,IAAD,CAAU0C,IAAKL,EAAMiB,OAAO,SAGpC,eAAC,IAAD,CAAQT,UAAW,qBAAnB,UACI,cAAC,IAAD,UACKN,EAAQ,cAAC,EAAD,CAAQnC,IAAKe,EAAIO,EAAUtB,MAAW,OAEnD,cAAC,IAAD,aC3ELmD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASsC,eAAe,SAM1BX,M","file":"static/js/main.041ba515.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './App.scss';\n\nimport * as bs from \"react-bootstrap\";\n\nconst fallbackURL = process.env.PUBLIC_URL + '/mm5a7753.jpg';\n\nconst Canvas = (props: { img: ImageData }) => {\n    const img = props.img;\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    useEffect(() => {\n        const canvas = canvasRef.current!;\n        canvas.width = img.width;\n        canvas.height = img.height;\n        const context = canvas.getContext('bitmaprenderer')!;\n        createImageBitmap(img, 0, 0, img.width, img.height).then((bmp) => {\n            context.transferFromImageBitmap(bmp)\n        });\n\n    })\n    return <canvas ref={canvasRef}/>\n}\n\nconst lum = (img: ImageData):ImageData => {\n    var data = img.data.slice();\n    for (var i = 0; i < img.data.length; i += 4) {\n        const r = img.data[i + 0];\n        const g = img.data[i + 1];\n        const b = img.data[i + 2];\n        const y = (r+g+b)/3;\n        data[i+0]=y;\n        data[i+1]=y;\n        data[i+2]=y;\n    }\n    return new ImageData(data,img.width,img.height);\n}\n\n\nconst imageData = (img: HTMLImageElement) => {\n    let cvs = document.createElement('canvas');\n    cvs.width = img.width;\n    cvs.height = img.height;\n    let ctx = cvs.getContext('2d')!;\n    console.log(cvs.width);\n    ctx.drawImage(img, 0, 0, cvs.width, cvs.height);\n    return ctx.getImageData(0, 0, cvs.width, cvs.height);\n}\n\nfunction App() {\n    const [file, setFile] = useState(fallbackURL);\n    const [ready, setReady] = useState(false);\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setReady(false);\n        if (e.target.files !== null) {\n            setFile(URL.createObjectURL(e.target.files[0]));\n        } else {\n            setFile(fallbackURL);\n        }\n    };\n    const handleLoad = (e: Event) => {\n        setReady(true);\n        //\n\n    };\n\n    let img = new Image();\n    img.src = file;\n    img.onload = handleLoad;\n\n\n    return (\n        <div className=\"App\">\n            <bs.Container>\n                <bs.Row className={\"align-items-center\"}>\n                    <bs.Col>\n                        <bs.Form.File\n                            custom={true}\n                            label=\"Analyze another image\"\n                            onChange={handleChange}\n                        />\n                    </bs.Col>\n                    <bs.Col>\n                        <bs.Image src={file} fluid={true}/>\n                    </bs.Col>\n                </bs.Row>\n                <bs.Row className={\"align-items-center\"}>\n                    <bs.Col>\n                        {ready ? <Canvas img={lum(imageData(img))}/> : null}\n                    </bs.Col>\n                    <bs.Col>\n                        {/*{cvs}*/}\n                    </bs.Col>\n                </bs.Row>\n            </bs.Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}